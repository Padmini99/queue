class circularqueue{
    public:
    int *arr;
    int size;
    int front;
    int rear;
    circularqueue(int size){
        this->size=size;
        arr=new int[size];
        front =0;
        rear=0;
    }
    bool enqueue(int x){
        //check queue is full or not
        //check full or not
        if((front==0 && rear==size-1) || (rear==(front-1)%(size-1))){
            //cout<<"full"<<endl;
            return false;
        }
        else if(front==-1){
            front=rear=0;
            //arr[rear]=x;
        }
        else if(rear==size-1 && front!=0){
            rear=0;
            //arr[rear]=x;
        }
        else{
            rear++;
            //arr[rear]=x;
        }
        arr[rear]=x;
        return true;
    }
    int dequeue(){
        //check queue is empty or not
        //check empty or not
        if(front==-1){
            //cout<<"empty";
            return -1;
        }
        int ans=arr[front];
        arr[front]=-1;
        if(front==rear){
            front=rear=-1;
        }
        else if(front==size-1){
            front=0;
        }
        else{
            front++;
        }
        return ans;
    }
    bool isEmpty() {
    return front == -1; // Queue is empty if front is -1
}
int qfront() {
    if (isEmpty()) {
        cout << "Queue is empty" << endl;
        return -1;
    }
    return arr[front];
}
};
